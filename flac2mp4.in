#!/usr/bin/perl -w
#
# Copyright 2008 Geoff Levand
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# -- todo --
# use nero encoder
# output to tmp file and rename
# add threads
# multiple quality opts
#
package main;

use strict;
use warnings;
use Getopt::Std;
require audx;

my $app_name = q(flac2mp4);
my $app_version = q((@PACKAGE_NAME@) @PACKAGE_VERSION@);
my $app_bugreport = q(Send bug reports to @PACKAGE_BUGREPORT@.);

my %qualities = (
	128 => {
		prefix => "128",
		faac_opts => "-q 100 -c 16000",
		nero_opts => "-2pass -br 128000",
	},
	256 => {
		prefix => "256",
		faac_opts => "-q 200 -c 24000",
		nero_opts => "-2pass -br 256000",
	},
);

sub VERSION_MESSAGE
{
	print($app_name . " " . $app_version . "\n");
}

$Getopt::Std::STANDARD_HELP_VERSION = 1;

sub HELP_MESSAGE
{
	print("SYNOPSIS\n"
. "     " . $app_name . " [-OPTIONS]\n"
. "DESCRIPTION\n"
. "     Create mp4 encoded files from flac files listed on stdin.\n"
. "     The mp4 files are suitable for download to walkman type\n"
. "     devices.\n"
. "OPTIONS\n"
. "     -h, --help\n"
. "          Print a help message.\n"
. "     -k\n"
. "          Keep the intermediate wave files.\n"
. "     -p prefix\n"
. "          Create mp4 files in directory prefix.\n"
. "     -q quality\n"
. "          Encoding quality, one of {"
	. join( ',', sort(keys(%qualities))) . "}.\n"
. "     -n\n"
. "          Dry run (no decoding/encoding).\n"
. "     -v level\n"
. "          Program verbosity level.\n"
. "     -V, --version\n"
. "          Display the program version number.\n"
. "EXAMPLE\n"
. "     find music/flac -type f -name '*.flac' | sort | \\\n"
. "     flac2mp4 -q 256 -p mp4-256 -v\n"
	);
	print($app_bugreport . "\n");
}

sub opts_parse (@)
{
	my ($opts) = @_;
	our ($opt_h, $opt_k, $opt_p, $opt_q, $opt_n, $opt_v, $opt_V);

	getopts('hkp:q:nv:V');

	if (defined($opt_h)) {
		VERSION_MESSAGE();
		HELP_MESSAGE();
		exit 0;
	}
	
	if (defined($opt_V)) {
		VERSION_MESSAGE();
		exit 0;
	}

	$opts->{keep} = defined($opt_k) ? 1 : 0;
	$opts->{prefix} = defined($opt_p) ? $opt_p : "./";

	if (!defined($opt_q)) {
		print STDERR ("ERROR: No encoding quality specified.\n");
		VERSION_MESSAGE();
		HELP_MESSAGE();
		exit 1;
	}

	foreach my $x (keys(%qualities)) {
		if ($opt_q eq $x) {
			$opts->{quality} = $x;
			last;
		}
	}

	if (!defined($opts->{quality})) {
		print STDERR ("ERROR: Bad encoding quality specified.\n");
		VERSION_MESSAGE();
		HELP_MESSAGE();
		exit 1;
	}

	$opts->{dry_run} = defined($opt_n) ? 1 : 0;
	$opts->{verbosity} = defined($opt_v) ? $opt_v
		: $opts->{dry_run} ? 1 : 0;
}

# start of program

my %opts;
opts_parse(\%opts);

my $time =`date +%y.%m.%d.%H.%M.%S`;
chomp($time);

print STDOUT ($app_name . ": processed at " . $time . "\n");

if ($opts{verbosity}) {
	print STDOUT ($app_name . ": verbosity: " . $opts{verbosity} . "\n");
	print STDOUT ($app_name . ": quality:   " . $opts{quality} . "\n");
	print STDOUT ($app_name . ": out_prefix: '" . $opts{prefix} . "'\n");
}

my @file_info;
my $file_info_count = 0;

while(<>) {
	chomp($_);

	my %info;
	audx::file_info_parse(\%info, $_, $opts{verbosity});

	my %file;
	$file{info} = \%info;

	$file_info_count++;
	push(@file_info, \%file);
}

print STDOUT ($app_name . ": processing " . $file_info_count
	. " input files\n");

FILE: foreach my $file (@file_info) {
	my $result;

	audx::file_info_print($file->{info}, $opts{verbosity});

	my %tags;
	audx::tags_from_metaflac(\%tags, $file->{info}->{full},
		$opts{verbosity});

	$file->{tags} = \%tags;

	audx::tags_print($file->{tags}, $opts{verbosity});

	my $out_dir = $opts{prefix} . "/" . $file->{info}->{path};
	my $wav_file = $out_dir . $file->{info}->{number} . "-"
		. $file->{info}->{title} . ".wav";
	my $mp4_file = $out_dir . $file->{info}->{number} . "-"
		. $file->{info}->{title} . ".m4a";

	print STDOUT ("mp4_file: '" . $mp4_file . "'\n")
		if ($opts{verbosity});

	if (audx::file_exists($mp4_file)) {
		print STDERR ("exists: '" . $mp4_file . "'\n")
			if ($opts{verbosity});
		next FILE;
	}

	if (audx::file_exists($wav_file)) {
		print STDERR ("exists: '" . $wav_file . "'\n")
			if ($opts{verbosity});
		next FILE;
	}

	audx::dir_make($out_dir, $opts{verbosity}) if (!$opts{dry_run});

	$result = audx::flac_decode($file->{info}->{full}, $wav_file,
			$opts{dry_run}, $opts{verbosity});

	if ($result) {
		print STDERR ($app_name . ": " . __LINE__ . ": flac_decode "
			. $file->{info}->{full} . " failed.\n");
		exit 1;
	}

	if (0) {
		$result = audx::faac_encode($wav_file, $file->{tags},
			$qualities{$opts{quality}}->{faac_opts}, $mp4_file,
			$opts{dry_run}, $opts{verbosity});

		if ($result) {
			print STDERR ($app_name . ": " . __LINE__
				. ": faac_encode " . $file->{info}->{full}
				. " failed.\n");
			exit 1;
		}
	} else {
		$result = audx::nero_encode($wav_file, $file->{tags},
			$qualities{$opts{quality}}->{nero_opts}, $mp4_file,
			$opts{dry_run}, $opts{verbosity});

		if ($result) {
			print STDERR ($app_name . ": " . __LINE__
				. ": nero_encode " . $file->{info}->{full}
				. " failed.\n");
			exit 1;
		}
	}

	audx::file_remove($wav_file) if (!$opts{dry_run} && !$opts{keep});
}

__END__
