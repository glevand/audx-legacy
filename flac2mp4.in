#!/usr/bin/perl -w
#
# Copyright 2008 Geoff Levand
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# -- todo --
# output to tmp file and rename
# add threads
# check for existing wav file
# multiple quality opts
#
package main;

use strict;
use warnings;
use Getopt::Std;

my $app_name = q(flac2mp4);
my $app_version = q((@PACKAGE_NAME@) @PACKAGE_VERSION@);
my $app_bugreport = q(Send bug reports to @PACKAGE_BUGREPORT@.);

my %qualities = (
	128 => {prefix => "128", opts => "-q 100 -c 16000"},
	256 => {prefix => "256", opts => "-q 200 -c 24000"},
);

sub VERSION_MESSAGE
{
	print($app_name . " " . $app_version . "\n");
}

$Getopt::Std::STANDARD_HELP_VERSION = 1;

sub HELP_MESSAGE
{
	print("SYNOPSIS\n"
. "     " . $app_name . " [-OPTIONS]\n"
. "DESCRIPTION\n"
. "     Create mp4 encoded files from a list of flac encoded file names\n"
. "     specified on stdin.  The mp4 files are suitable for download to\n"
. "     walkman type devices.\n"
. "OPTIONS\n"
. "     -h, --help\n"
. "          Print a help message.\n"
. "     -k\n"
. "          Keep the intermediate wave files.\n"
. "     -p prefix\n"
. "          Create mp4 files in directory prefix.\n"
. "     -q quality\n"
. "          Encoding quality, one of {"
	. join( ',', sort(keys(%qualities))) . "}.\n"
. "     -n\n"
. "          Dry run (no decoding/encoding).\n"
. "     -v level\n"
. "          Program verbosity level.\n"
. "     -V, --version\n"
. "          Display the program version number.\n"
. "EXAMPLE\n"
. "     find music/flac -type f -name '*.flac' | sort | \\\n"
. "     flac2mp4 -q 256 -p mp4-256 -v 2>&1\n"
	);
	print($app_bugreport . "\n");
}

sub opts_parse (@)
{
	my ($opts) = @_;
	our ($opt_h, $opt_k, $opt_p, $opt_q, $opt_n, $opt_v, $opt_V);

	getopts('hkp:q:nv:V');

	if (defined($opt_h)) {
		VERSION_MESSAGE();
		HELP_MESSAGE();
		exit 0;
	}
	
	if (defined($opt_V)) {
		VERSION_MESSAGE();
		exit 0;
	}

	$opts->{keep} = defined($opt_k) ? 1 : 0;
	$opts->{prefix} = defined($opt_p) ? $opt_p : "./";

	if (!defined($opt_q)) {
		print STDERR ("ERROR: No encoding quality specified.\n");
		VERSION_MESSAGE();
		HELP_MESSAGE();
		exit 1;
	}

	foreach my $x (keys(%qualities)) {
		if ($opt_q eq $x) {
			$opts->{quality} = $x;
			last;
		}
	}

	if (!defined($opts->{quality})) {
		print STDERR ("ERROR: Bad encoding quality specified.\n");
		VERSION_MESSAGE();
		HELP_MESSAGE();
		exit 1;
	}

	$opts->{dry_run} = defined($opt_n) ? 1 : 0;
	$opts->{verbosity} = defined($opt_v) ? $opt_v : 0;
	$opts->{verbosity} = $opts->{dry_run} if !$opts->{verbosity};
	$opts->{version} = defined($opt_V) ? 1 : 0;
}

sub dir_make (@)
{
	my ($dir, $verbosity) = @_;

	# Prepare for shell: 'The B-52's' -> 'The B-52'\''s'.

	$dir =~ s/'/'\\''/g;

	my $cmd = q(mkdir -p ') . $dir . q(');

	print STDOUT ("cmd: @" . $cmd . "@\n") if ($verbosity >= 4);

	my $result = system($cmd);

	if ($result) {
		print STDERR ("error: @" . $cmd . "@ failed.\n");
		exit 1;
	}
}

sub file_exists (@)
{
	my ($file) = @_;

	return ( -f $file );
}

sub file_remove (@)
{
	my ($file) = @_;

	$file =~ s/'/'\\''/g;
	return system(q(rm ') . $file . q('));
}

sub file_info_parse (@)
{
	my ($info, $file, $verbosity) = @_;

	# %{albumartist}/%{albumtitle}/%{artist} - %{number} - %{title}.%{extension}
	# prefix: '/home/geoff/music/collection/flac/'
	# path:  '10,000 Maniacs/Blind Man's Zoo/'
	# name:  '10,000 Maniacs - 01 - Eat For Two'

	$info->{full} = $file;

	$info->{full} =~ m{^(.+/)([^/]+/[^/]+/)([^/]+)\.(flac)$};

	$info->{prefix} = $1;
	$info->{path} = $2;
	$info->{name} = $3;
	$info->{ext} = $4;

	$info->{path} =~ m{^([^/]+)/([^/]+)/$};

	$info->{albumartist} = $1;
	$info->{albumtitle} = $2;

	$info->{name} =~ m{^(.+) - ([0-9][0-9]) - (.+)$};

	$info->{artist} = $1;
	$info->{number} = $2;
	$info->{title} = $3;
}

sub file_info_print (@)
{
	my ($info, $verbosity) = @_;

	if ($verbosity) {
		print STDOUT ("--------------------------------------------\n");
		print STDOUT ("i-file:        '" . $info->{full} . "'\n");
		print STDOUT ("i-prefix:      '" . $info->{prefix} . "'\n");
		print STDOUT ("i-path:        '" . $info->{path} . "'\n");
		print STDOUT ("i-name:        '" . $info->{name} . "'\n");
		print STDOUT ("i-ext:         '" . $info->{ext} . "'\n");
	}
	if ($verbosity >= 2) {
		print STDOUT ("i-albumartist: '"
			. $info->{albumartist} . "'\n");
		print STDOUT ("i-albumtitle:  '" . $info->{albumtitle} . "'\n");
		print STDOUT ("i-number:      '" . $info->{number} . "'\n");
		print STDOUT ("i-title:       '" . $info->{title} . "'\n");
	}
}

sub tags_from_metaflac (@)
{
	my ($tags, $in_file, $verbosity) = @_;

	# Prepare for shell: 'I'm Eighteen' -> 'I'\''m Eighteen'.

	$in_file =~ s/'/'\\''/g;

	my $cmd = "metaflac --list --block-type=VORBIS_COMMENT '" . $in_file
		. "'";

	print STDOUT ("cmd: @" . $cmd . "@\n") if ($verbosity >= 4);

	my $meta = qx($cmd);
	chomp($meta);

	$tags->{meta} = $meta if ($verbosity >= 3);

	$tags->{artist} = $1  if ($meta =~ m{: ARTIST=(.*)}i);
	$tags->{album} = $1   if ($meta =~ m{: ALBUM=(.*)}i);
	$tags->{title} = $1   if ($meta =~ m{: TITLE=(.*)}i);
	$tags->{track} = $1   if ($meta =~ m{: TRACKNUMBER=(.*)}i);
	$tags->{disk} = $1    if ($meta =~ m{: DISKNUMBER=(.*)}i);
	$tags->{date} = $1    if ($meta =~ m{: DATE=(.*)}i);
	$tags->{genre} = $1   if ($meta =~ m{: GENRE=(.*)}i);
	$tags->{comment} = $1 if ($meta =~ m{: COMMENT=(.*)}i);
}

sub tags_print (@)
{
	my ($tags, $verbosity) = @_;

	return if (!$verbosity);

	print STDOUT ("t-meta: @" . $tags->{meta} . "@\n")
		if ($verbosity >= 3 && defined($tags->{meta}));
	print STDOUT ("t-artist:      '" . $tags->{artist} . "'\n");
	print STDOUT ("t-album:       '" . $tags->{album} . "'\n");
	print STDOUT ("t-title:       '" . $tags->{title} . "'\n");
	print STDOUT ("t-track:       '" . $tags->{track} . "'\n");
	print STDOUT ("t-disk:        '" . $tags->{disk} . "'\n")
		if (defined($tags->{disk}));
	print STDOUT ("t-date:        '" . $tags->{date} . "'\n")
		if (defined($tags->{date}));
	print STDOUT ("t-genre:       '" . $tags->{genre} . "'\n")
		if (defined($tags->{genre}));
	print STDOUT ("t-comment:     '" . $tags->{comment} . "'\n")
		if (defined($tags->{comment}));
}

sub flac_decode (@)
{
	my ($in_file, $out_file, $dry_run, $verbosity) = @_;

	my $silent = ($verbosity > 1) ? "" : "--silent ";
	my $sink = ($verbosity > 1) ? "" : " 2> /dev/null";

	# Prepare for shell: 'Livin' Thing' -> 'Livin'\'' Thing'.

	$in_file =~ s/'/'\\''/g;
	$out_file =~ s/'/'\\''/g;

	my $cmd = q(flac --decode --decode-through-errors --force ) . $silent
		. q(--output-name=') . $out_file . q(' ') . $in_file . q(')
		. $sink;

	print STDOUT ("cmd: @" . $cmd . "@\n") if ($verbosity >= 4);

	my $result;

	if (!$dry_run) {
		$result = system($cmd);
		print STDERR ($app_name . ": " . __LINE__ . ": cmd: @" . $cmd
			. "@ failed.\n") if $result;
	}

	return !!$result;
}

sub faac_encode (@)
{
	my ($in_file, $tags, $quality, $out_file, $dry_run, $verbosity) = @_;
	my $result;
	my $tag;

	my $sink = ($verbosity > 1) ? "" : " 2> /dev/null";

	$in_file =~ s/'/'\\''/g;
	$out_file =~ s/'/'\\''/g;

	my $cmd = q(faac ) . $qualities{$quality}->{opts};

	if (!defined($tags->{artist}) || !defined($tags->{album})
		|| !defined($tags->{title}) || !defined($tags->{track})) {
		print STDERR ($app_name . ": " . __LINE__ . ": bad tags.\n");
		exit 1;
	}

	$tag = $tags->{artist};
	$tag =~ s/'/'\\''/g;
	$cmd .= q( --artist ') . $tag . q(');

	$tag = $tags->{album};
	$tag =~ s/'/'\\''/g;
	$cmd .= q( --album ') . $tag . q(');

	$tag = $tags->{title};
	$tag =~ s/'/'\\''/g;
	$cmd .= q( --title ') . $tag . q(');

	$cmd .= q( --track ) . $tags->{track};

	$cmd .= q( --year ) . $tags->{date} if (defined($tags->{date}));

	if (defined($tags->{genre})) {
		$tag = $tags->{genre};
		$tag =~ s/'/'\\''/g;
		$cmd .= q( --genre ') . $tag . q(');
	}

	$cmd .= q( --disc ) . $tags->{disc} if (defined($tags->{disc}));

	if (defined($tags->{comment})) {
		$tag = $tags->{comment};
		$tag =~ s/'/'\\''/g;
		$cmd .= q( --comment ') . $tag . q(');
	}

	$cmd .= q( -o ') . $out_file . q(' ') . $in_file . q(') . $sink;

	print STDOUT ("cmd: @" . $cmd . "@\n") if ($verbosity >= 2);

	if (!$dry_run) {
		$result = system($cmd);
		print STDERR ($app_name . ": " . __LINE__ . ": cmd: @" . $cmd
			. "@ failed.\n") if $result;
	}

	return !!$result;
}

# start of program

my %opts;
opts_parse(\%opts);

my $time =`date +%y.%m.%d.%H.%M.%S`;
chomp($time);

print STDOUT ($app_name . ": processed at " . $time . "\n");

if ($opts{verbosity}) {
	print STDOUT ($app_name . ": verbosity: " . $opts{verbosity} . "\n");
	print STDOUT ($app_name . ": quality:   " . $opts{quality} . "\n");
	print STDOUT ($app_name . ": out_prefix: '" . $opts{prefix} . "'\n");
}

my @file_info;
my $file_info_count = 0;

while(<>) {
	chomp($_);

	my %info;
	file_info_parse(\%info, $_, $opts{verbosity});

	my %file;
	$file{info} = \%info;

	$file_info_count++;
	push(@file_info, \%file);
}

print STDOUT ($app_name . ": processing " . $file_info_count
	. " input files\n");

FILE: foreach my $file (@file_info) {
	my $result;

	file_info_print($file->{info}, $opts{verbosity});

	my %tags;
	tags_from_metaflac(\%tags, $file->{info}->{full}, $opts{verbosity});

	$file->{tags} = \%tags;

	tags_print($file->{tags}, $opts{verbosity});

	my $out_dir = $opts{prefix} . "/" . $file->{info}->{path};
	my $wav_file = $out_dir . $file->{info}->{title} . ".wav";
	my $mp4_file = $out_dir . $file->{info}->{title} . ".mp4";

	print STDOUT ("mp4_file: '" . $mp4_file . "'\n")
		if ($opts{verbosity});

	if (file_exists($mp4_file)) {
		print STDERR ("exists: '" . $mp4_file . "'\n")
			if ($opts{verbosity});
		next FILE;
	}

	dir_make($out_dir, $opts{verbosity}) if (!$opts{dry_run});

	$result = flac_decode($file->{info}->{full}, $wav_file, $opts{dry_run},
			$opts{verbosity});

	if ($result) {
		print STDERR ($app_name . ": " . __LINE__ . ": flac_decode "
			. $file->{info}->{full} . "failed.\n");
		exit 1;
	}

	$result = faac_encode($wav_file, $file->{tags}, $opts{quality},
		$mp4_file, $opts{dry_run}, $opts{verbosity});

	if ($result) {
		print STDERR ($app_name . ": " . __LINE__ . ": faac_encode "
			. $file->{info}->{full} . "failed.\n");
		exit 1;
	}

	file_remove($wav_file) if (!$opts{dry_run} && !$opts{keep});
}

__END__
